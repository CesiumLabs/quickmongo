{"meta":{"generator":"0.9.0","format":20,"date":1622339585544},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<p align=\"center\">\n  <img src=\"https://cdn.discordapp.com/attachments/793689592414994466/832094486845849610/logo.7959db12_50.png\" />\n</p>\n\n## Download & Installation\n\n```shell\n$ npm i quickmongo\n```\n\n# Features\n- Beginner friendly\n- Very similar to **[quick.db](https://npmjs.com/package/quick.db)**\n- Dot notation support\n- Import & export support\n- Key value based\n- Asynchronous\n- Multiple model support\n<h3>-> <a href=\"https://quickmongo.js.org\">Documentation</a></h3>\n<h3>-> <a href=\"https://github.com/DevSnowflake/quickmongo\">Github Repository</a></h3>\n<h3>-> <a href=\"https://discord.gg/uqB8kxh\">Support Server (Discord)</a></h3>\n<br>\n\n# Quick Example\n\n```js\nconst { Database } = require(\"quickmongo\");\nconst db = new Database(\"mongodb://localhost/quickmongo\");\n\ndb.on(\"ready\", () => {\n    console.log(\"Database connected!\");\n});\n\ndb.set(\"foo\", \"bar\");\n\ndb.get(\"foo\").then(console.log);\n```\n\n# Import Existing Data From quick.db\n\n```js\nconst db = require(\"quick.db\");\nconst { Database } = require(\"quickmongo\");\nconst mongo = new Database(\"mongodb://localhost/quickmongo\");\n\nfunction importData() {\n    const data = db.all();\n    mongo.import(data).then(() => {\n        console.log(\"Done!\");\n    });    \n}\n\nmongo.on(\"ready\", () => importData());\n```\n\n# Example\n\n```js\nconst { Database } = require(\"quickmongo\");\nconst db = new Database(\"mongodb://localhost/quickmongo\");\n\n// Setting an object in the database:\ndb.set(\"userInfo\", { difficulty: \"Easy\" }).then(console.log);\n// -> { difficulty: 'Easy' }\n\ndb.push(\"userInfo.items\", \"Sword\").then(console.log);\n// -> { difficulty: 'Easy', items: ['Sword'] }\n\ndb.add(\"userInfo.balance\", 500).then(console.log);\n// -> { difficulty: 'Easy', items: ['Sword'], balance: 500 }\n\n// Repeating previous examples:\ndb.push(\"userInfo.items\", \"Watch\").then(console.log);\n// -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 500 }\n\ndb.add(\"userInfo.balance\", 500).then(console.log);\n// -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 1000 }\n\n// Fetching individual properties\ndb.get(\"userInfo.balance\").then(console.log);\n// -> 1000\ndb.get(\"userInfo.items\").then(console.log);\n// -> ['Sword', 'Watch']\n```\n","path":"docs/general/welcome.md"}}}},"classes":[{"name":"Base","description":"<p>Base db</p>","extends":[[["EventEmitter"]]],"construct":{"name":"Base","description":"<p>Instantiates the base database.\nThis class is implemented by the main Database class.</p>","params":[{"name":"mongodbURL","description":"<p>Mongodb Database URL.</p>","type":[[["string"]]]},{"name":"connectionOptions","description":"<p>Mongodb connection options</p>","type":[[["object"]]]}]},"props":[{"name":"dbURL","description":"<p>Current database url</p>","type":[[["string"]]],"meta":{"line":29,"file":"Base.ts","path":"src"}},{"name":"options","description":"<p>Mongoose connection options</p>","type":[[["ConnectionOptions"]]],"meta":{"line":36,"file":"Base.ts","path":"src"}},{"name":"connection","description":"<p>Returns mongodb connection</p>","type":[[["MongooseConnection"]]],"meta":{"line":42,"file":"Base.ts","path":"src"}},{"name":"readyAt","description":"<p>Timestamp when database became ready</p>","type":[[["Date"]]],"meta":{"line":51,"file":"Base.ts","path":"src"}},{"name":"url","description":"<p>Current database url</p>","type":[[["string"]]],"meta":{"line":91,"file":"Base.ts","path":"src"}},{"name":"state","description":"<p>Returns database connection state</p>","type":[[["DISCONNECTED","\""]],[["CONNECTED","\""]],[["CONNECTING","\""]],[["DISCONNECTING","\""]]],"meta":{"line":99,"file":"Base.ts","path":"src"}}],"methods":[{"name":"_create","description":"<p>Creates database connection</p>","params":[{"name":"url","description":"<p>Database url</p>","optional":true,"default":"this.dbURL","type":[[["string"]]]}],"returns":[[["MongooseConnection"]]],"meta":{"line":61,"file":"Base.ts","path":"src"}},{"name":"_destroyDatabase","description":"<p>Destroys database</p>","access":"private","meta":{"line":80,"file":"Base.ts","path":"src"}}],"meta":{"line":6,"file":"Base.ts","path":"src"}},{"name":"MongoClient","description":"<p>A quick.db like wrapper for MongoDB.</p>","extends":[[["Base"]]],"construct":{"name":"MongoClient","description":"<p>Instantiates QuickMongo</p>","params":[{"name":"mongodbURL","description":"<p>MongoDB Database URI/URL</p>","optional":true,"type":[[["string"]]]},{"name":"name","description":"<p>Model Name</p>","optional":true,"default":null,"type":[[["string"]]]},{"name":"connectionOptions","description":"<p>Mongoose Connection Options</p>","optional":true,"type":[[["ConnectionOptions"]]]}]},"props":[{"name":"schema","description":"<p>QuickMongo's Main Schema / Current Model</p>","type":[[["MongooseDocument"]]],"meta":{"line":30,"file":"Client.ts","path":"src"}},{"name":"uptime","description":"<p>Returns database connection uptime</p>","type":[[["number"]]],"meta":{"line":312,"file":"Client.ts","path":"src"}},{"name":"utils","description":"<p>Returns <strong>QuickMongo Util</strong></p>","type":[[["Util"]]],"meta":{"line":632,"file":"Client.ts","path":"src"}},{"name":"currentModelName","description":"<p>Current model name</p>","readonly":true,"type":[[["string"]]],"meta":{"line":661,"file":"Client.ts","path":"src"}},{"name":"dbURL","description":"<p>Current database url</p>","type":[[["string"]]],"meta":{"line":29,"file":"Base.ts","path":"src"}},{"name":"options","description":"<p>Mongoose connection options</p>","type":[[["ConnectionOptions"]]],"meta":{"line":36,"file":"Base.ts","path":"src"}},{"name":"connection","description":"<p>Returns mongodb connection</p>","type":[[["MongooseConnection"]]],"meta":{"line":42,"file":"Base.ts","path":"src"}},{"name":"readyAt","description":"<p>Timestamp when database became ready</p>","type":[[["Date"]]],"meta":{"line":51,"file":"Base.ts","path":"src"}},{"name":"url","description":"<p>Current database url</p>","type":[[["string"]]],"meta":{"line":91,"file":"Base.ts","path":"src"}},{"name":"state","description":"<p>Returns database connection state</p>","type":[[["DISCONNECTED","\""]],[["CONNECTED","\""]],[["CONNECTING","\""]],[["DISCONNECTING","\""]]],"meta":{"line":99,"file":"Base.ts","path":"src"}}],"methods":[{"name":"set","description":"<p>Sets or Updates Existing Data</p>","examples":["db.set(\"foo\", \"bar\").then(() => console.log(\"Updated/Set data\"));"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]}],"async":true,"returns":[[["any"]]],"meta":{"line":37,"file":"Client.ts","path":"src"}},{"name":"get","description":"<p>Fetches the data from database</p>","examples":["db.get(\"foo\").then(console.log);"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]}],"async":true,"returns":[[["any"]]],"meta":{"line":65,"file":"Client.ts","path":"src"}},{"name":"getMultiple","description":"<p>Fetch Multiple Documents</p>","params":[{"name":"keys","description":"<p>Array Of Key's To Fetch</p>","type":[[["Array","<"],["string",">"]]]}],"async":true,"returns":[[["Array","<"],["object",">"]]],"meta":{"line":88,"file":"Client.ts","path":"src"}},{"name":"fetch","description":"<p>Fetches the data from database</p>","examples":["db.fetch(\"foo\").then(console.log);"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":98,"file":"Client.ts","path":"src"}},{"name":"delete","description":"<p>Removes/Delete's data from the database.</p>","examples":["db.delete(\"foo\").then(() => console.log(\"Deleted data\"));"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]},{"name":"value","description":"<p>Value</p>","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":108,"file":"Client.ts","path":"src"}},{"name":"deleteMultiple","description":"<p>Delete Multiple Documents</p>","params":[{"name":"keys","description":"<p>Key's To Delete</p>","type":[[["Array","<"],["string",">"]]]}],"async":true,"meta":{"line":136,"file":"Client.ts","path":"src"}},{"name":"exists","description":"<p>Checks if there is a data stored with the given key</p>","examples":["db.exists(\"foo\").then(console.log);"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":145,"file":"Client.ts","path":"src"}},{"name":"has","description":"<p>Checks if there is a data stored with the given key</p>","examples":["db.has(\"foo\").then(console.log);"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":165,"file":"Client.ts","path":"src"}},{"name":"all","description":"<p>Returns everything from the database</p>","examples":["let data = await db.all();","console.log(`There are total ${data.length} entries.`);"],"params":[{"name":"limit","description":"<p>Data limit</p>","default":0,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Data",">>"]]],"meta":{"line":181,"file":"Client.ts","path":"src"}},{"name":"fetchAll","description":"<p>Returns everything from the database</p>","examples":["let data = await db.all();\nconsole.log(`There are total ${data.length} entries.`);"],"params":[{"name":"limit","description":"<p>Data limit</p>","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Data",">>"]]],"meta":{"line":196,"file":"Client.ts","path":"src"}},{"name":"deleteAll","description":"<p>Deletes the entire model</p>","examples":["db.deleteAll().then(() => console.log(\"Deleted everything\"));"],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":207,"file":"Client.ts","path":"src"}},{"name":"math","description":"<p>Math calculation</p>","examples":["db.math(\"items\", \"+\", 200).then(() => console.log(\"Added 200 items\"));"],"params":[{"name":"key","description":"<p>Key of the data</p>","type":[[["string"]]]},{"name":"operator","description":"<p>One of +, -, *, / or %</p>","type":[[["string"]]]},{"name":"value","description":"<p>Value</p>","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":218,"file":"Client.ts","path":"src"}},{"name":"add","description":"<p>Add</p>","examples":["db.add(\"items\", 200).then(() => console.log(\"Added 200 items\"));"],"params":[{"name":"key","description":"<p>key</p>","type":[[["string"]]]},{"name":"value","description":"<p>value</p>","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":290,"file":"Client.ts","path":"src"}},{"name":"subtract","description":"<p>Subtract</p>","examples":["db.subtract(\"items\", 100).then(() => console.log(\"Removed 100 items\"));"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]},{"name":"value","description":"<p>Value</p>","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":301,"file":"Client.ts","path":"src"}},{"name":"export","description":"<p>Exports the data to json file</p>","examples":["db.export(\"database.json\", \"./\").then(path => {\n    console.log(`File exported to ${path}`);\n});"],"params":[{"name":"fileName","description":"<p>File name.</p>","default":"database","type":[[["string"]]]},{"name":"path","description":"<p>File path</p>","default":"./","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":323,"file":"Client.ts","path":"src"}},{"name":"import","description":"<p><warn>You should set <code>useUnique</code> to <code>true</code> in order to avoid duplicate documents.</warn></p>\n<p>Imports data from other source to quickmongo.</p>\n<p>Data type should be Array containing <code>ID</code> and <code>data</code> fields.\nExample:</p>\n<pre class=\"prettyprint source lang-js\"><code>[{ ID: &quot;foo&quot;, data: &quot;bar&quot; }, { ID: &quot;hi&quot;, data: &quot;hello&quot; }]\n</code></pre>","examples":["const data = QuickDB.all(); // imports data from quick.db to quickmongo\nQuickMongo.import(data);"],"params":[{"name":"data","description":"<p>Array of data</p>","type":[[["Array"]]]},{"name":"ops","description":"<p>Import options</p>","type":[[["object"]]]},{"name":"ops.validate","description":"<p>If set to true, it will insert valid documents only</p>","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ops.unique","description":"<p>If it should import unique data only (slow)</p>","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":350,"file":"Client.ts","path":"src"}},{"name":"disconnect","description":"<p>Disconnects the database</p>","examples":["db.disconnect();"],"returns":[[["void"]]],"meta":{"line":390,"file":"Client.ts","path":"src"}},{"name":"connect","description":"<p>Creates database connection.</p>\n<p>You don't need to call this method because it is automatically called by database manager.</p>","params":[{"name":"url","description":"<p>Database url</p>","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":400,"file":"Client.ts","path":"src"}},{"name":"_read","description":"<p>Read latency</p>","access":"private","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":412,"file":"Client.ts","path":"src"}},{"name":"_write","description":"<p>Write latency</p>","access":"private","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":424,"file":"Client.ts","path":"src"}},{"name":"fetchLatency","description":"<p>Fetches read and write latency of the database in ms</p>","examples":["const ping = await db.fetchLatency();\nconsole.log(\"Read: \", ping.read);\nconsole.log(\"Write: \", ping.write);\nconsole.log(\"Average: \", ping.average);"],"async":true,"returns":[[["Promise","<"],["DatabaseLatency",">"]]],"meta":{"line":443,"file":"Client.ts","path":"src"}},{"name":"ping","description":"<p>Fetches read and write latency of the database in ms</p>","examples":["const ping = await db.ping();\nconsole.log(\"Read: \", ping.read);\nconsole.log(\"Write: \", ping.write);\nconsole.log(\"Average: \", ping.average);"],"async":true,"returns":[[["Promise","<"],["DatabaseLatency",">"]]],"meta":{"line":459,"file":"Client.ts","path":"src"}},{"name":"startsWith","description":"<p>Fetches everything and sorts by given target</p>","examples":["const data = await db.startsWith(\"money\", { sort: \".data\", limit: 10 });"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]},{"name":"ops","description":"<p>Options</p>","type":[[["object"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Data",">>"]]],"meta":{"line":471,"file":"Client.ts","path":"src"}},{"name":"type","description":"<p>Resolves data type</p>","examples":["console.log(await db.type(\"foo\"));"],"params":[{"name":"key","description":"<p>key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<(\""],["string","\"|\""],["number","\"|\""],["bigint","\"|\""],["boolean","\"|\""],["symbol","\"|\""],["undefined","\"|\""],["object","\"|\""],["function","\"|\""],["array","\")>"]]],"meta":{"line":484,"file":"Client.ts","path":"src"}},{"name":"keyArray","description":"<p>Returns array of the keys</p>","examples":["const keys = await db.keyarray();\nconsole.log(keys);"],"async":true,"returns":[[["Promise","<"],["Array","<"],["string",">>"]]],"meta":{"line":497,"file":"Client.ts","path":"src"}},{"name":"valueArray","description":"<p>Returns array of the values</p>","examples":["const data = await db.valueArray();\nconsole.log(data);"],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":508,"file":"Client.ts","path":"src"}},{"name":"push","description":"<p>Pushes an item into array</p>","examples":["db.push(\"users\", \"John\"); // -> [\"John\"]\ndb.push(\"users\", [\"Milo\", \"Simon\", \"Kyle\"]); // -> [\"John\", \"Milo\", \"Simon\", \"Kyle\"]"],"params":[{"name":"key","description":"<p>key</p>","type":[[["string"]]]},{"name":"value","description":"<p>Value to push</p>","type":[[["any"]],[["Array","<"],["any",">"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":519,"file":"Client.ts","path":"src"}},{"name":"pull","description":"<p>Removes an item from array</p>","examples":["db.pull(\"users\", \"John\"); // -> [\"Milo\", \"Simon\", \"Kyle\"]\ndb.pull(\"users\", [\"Milo\", \"Simon\"]); // -> [\"Kyle\"]"],"params":[{"name":"key","description":"<p>key</p>","type":[[["string"]]]},{"name":"value","description":"<p>item to remove</p>","type":[[["any"]],[["Array","<"],["any",">"]]]},{"name":"multiple","description":"<p>if it should pull multiple items. Defaults to <code>true</code>.\n<warn>Currently, you can use <code>multiple</code> with <code>non array</code> pulls only.</warn></p>","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":539,"file":"Client.ts","path":"src"}},{"name":"entries","description":"<p>Returns entries count of current model</p>","examples":["const entries = await db.entries();\nconsole.log(`There are total ${entries} entries!`);"],"async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":570,"file":"Client.ts","path":"src"}},{"name":"raw","description":"<p>Returns raw data from current model</p>","examples":["const raw = await db.raw();\nconsole.log(raw);"],"params":[{"name":"params","description":"<p>Search params</p>","type":[[["object"]]]}],"async":true,"returns":[[["Promise","<"],["MongooseDocument",">"]]],"meta":{"line":580,"file":"Client.ts","path":"src"}},{"name":"random","description":"<p>Returns random entry from the database</p>","examples":["const random = await db.random();\nconsole.log(random);"],"params":[{"name":"n","description":"<p>Number entries to return</p>","default":1,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":591,"file":"Client.ts","path":"src"}},{"name":"createModel","description":"<p>This method acts like <code>quick.db#table</code>. It will return new instance of itself.</p>","params":[{"name":"name","description":"<p>Model name</p>","type":[[["string"]]]}],"returns":[[["Database"]]],"meta":{"line":606,"file":"Client.ts","path":"src"}},{"name":"exportToQuickDB","description":"<p>This method exports <strong>QuickMongo</strong> data to <strong>Quick.db</strong></p>","examples":["const data = await db.exportToQuickDB(quickdb);"],"params":[{"name":"quickdb","description":"<p>Quick.db instance</p>","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":617,"file":"Client.ts","path":"src"}},{"name":"updateModel","description":"<p>Updates current model and uses new one</p>","params":[{"name":"name","description":"<p>Model Name</p>","type":[[["string"]]]}],"returns":[[["MongooseDocument"]]],"meta":{"line":642,"file":"Client.ts","path":"src"}},{"name":"toString","description":"<p>String representation of the database</p>","examples":["console.log(db.toString());"],"returns":[[["string"]]],"meta":{"line":652,"file":"Client.ts","path":"src"}},{"name":"_eval","description":"<p>Allows you to eval code using <code>this</code> keyword.</p>","examples":["db._eval(\"this.all().then(console.log)\"); // -> [{ ID: \"...\", data: ... }, ...]"],"params":[{"name":"code","description":"<p>code to eval</p>","type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":670,"file":"Client.ts","path":"src"}},{"name":"_create","description":"<p>Creates database connection</p>","inherits":"Base#_create","inherited":true,"params":[{"name":"url","description":"<p>Database url</p>","optional":true,"default":"this.dbURL","type":[[["string"]]]}],"returns":[[["MongooseConnection"]]],"meta":{"line":61,"file":"Base.ts","path":"src"}},{"name":"_destroyDatabase","description":"<p>Destroys database</p>","access":"private","inherits":"Base#_destroyDatabase","inherited":true,"meta":{"line":80,"file":"Base.ts","path":"src"}}],"events":[{"name":"ready","description":"<p>Emitted when database creates connection</p>","meta":{"line":682,"file":"Client.ts","path":"src"}},{"name":"error","description":"<p>Emitted when database encounters error</p>","params":[{"name":"Error","description":"<p>Error Message</p>","type":[[["Error"]]]}],"meta":{"line":690,"file":"Client.ts","path":"src"}},{"name":"debug","description":"<p>Emitted on debug mode</p>","params":[{"name":"Message","description":"<p>Debug message</p>","type":[[["string"]]]}],"meta":{"line":697,"file":"Client.ts","path":"src"}}],"meta":{"line":9,"file":"Client.ts","path":"src"}},{"name":"Util","construct":{"name":"Util","description":"<p><strong>You <em>cannot instantiate</em> Util class. Every methods of this class are <code>static</code> methods.</strong></p>"},"methods":[{"name":"isKey","description":"<p>Returns true if provided key is valid</p>","scope":"static","params":[{"name":"str","description":"<p>Anything to test</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":12,"file":"util.ts","path":"src/util"}},{"name":"isValue","description":"<p>Returns true if the given data is valid</p>","scope":"static","params":[{"name":"data","description":"<p>Any data</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":21,"file":"util.ts","path":"src/util"}},{"name":"parseKey","description":"<p>Returns target &amp; key from the given string (quickdb style)</p>","scope":"static","examples":["Util.parseKey(\"myitem.items\");\n// -> { key: \"myitems\", target: \"items\" }"],"params":[{"name":"key","description":"<p>key to parse</p>","type":[[["string"]]]}],"returns":[[["KEY"]]],"meta":{"line":38,"file":"util.ts","path":"src/util"}},{"name":"sort","description":"<p>Sort data</p>","scope":"static","examples":["Util.sort(\"user_\", {...}, { sort: \".data\" });"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]},{"name":"data","description":"<p>Data</p>","type":[[["Array"]]]},{"name":"ops","description":"<p>options</p>","type":[[["object"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":56,"file":"util.ts","path":"src/util"}},{"name":"setData","description":"<p>Data resolver</p>","scope":"static","examples":["Util.setData(\"user.items\", {...}, [\"pen\"]);"],"params":[{"name":"key","description":"<p>Data key</p>","type":[[["string"]]]},{"name":"data","description":"<p>Data</p>","type":[[["any"]]]},{"name":"value","description":"<p>value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":75,"file":"util.ts","path":"src/util"}},{"name":"unsetData","description":"<p>Data resolver</p>","scope":"static","examples":["Util.unsetData(\"user.items\", {...});"],"params":[{"name":"key","description":"<p>Data key</p>","type":[[["string"]]]},{"name":"data","description":"<p>Data</p>","type":[[["any"]]]},{"name":"value","description":"<p>value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":91,"file":"util.ts","path":"src/util"}},{"name":"getData","description":"<p>Data resolver</p>","scope":"static","examples":["Util.getData(\"user.items\", {...});"],"params":[{"name":"key","description":"<p>Key</p>","type":[[["string"]]]},{"name":"data","description":"<p>Data</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":108,"file":"util.ts","path":"src/util"}}],"meta":{"line":5,"file":"util.ts","path":"src/util"}}],"interfaces":[],"typedefs":[{"name":"Data","type":[[["object"]]],"props":[{"name":"ID","description":"<p>Data id</p>","type":[[["string"]]]},{"name":"data","description":"<p>Data</p>","type":[[["any"]]]}],"meta":{"line":175,"file":"Client.ts","path":"src"}},{"name":"DatabaseLatency","type":[[["object"]]],"props":[{"name":"read","description":"<p>Read latency</p>","type":[[["number"]]]},{"name":"write","description":"<p>Write latency</p>","type":[[["number"]]]},{"name":"average","description":"<p>Average latency</p>","type":[[["number"]]]}],"meta":{"line":436,"file":"Client.ts","path":"src"}},{"name":"KEY","type":[[["object"]]],"props":[{"name":"key","description":"<p>Parsed Key</p>","type":[[["string"]],[["undefined"]]]},{"name":"target","description":"<p>Parsed target</p>","type":[[["string"]],[["undefined"]]]}],"meta":{"line":32,"file":"util.ts","path":"src/util"}}],"externals":[]}