{"meta":{"generator":"0.9.0","format":20,"date":1630500291979},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# QuickMongo\n\nQuick Mongodb wrapper for beginners that provides key-value based interface.\n\n![](https://camo.githubusercontent.com/ee0b303561b8c04223d4f469633e2088968cf514f0f6901c729331c462a32f10/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6174746163686d656e74732f3739333638393539323431343939343436362f3833323039343438363834353834393631302f6c6f676f2e37393539646231325f35302e706e67)\n\n# Installing\n\n```bash\n$ npm install --save mongodb # required\n$ npm install --save quickmongo\n```\n\n# Documentation\n**[https://quickmongo.js.org](https://quickmongo.js.org)**\n\n# Features\n- Beginner friendly\n- Strongly typed\n- Asynchronous\n- Dot notation support\n- Key-Value like interface\n- Easy to use\n\n# Example\n\n```js\nconst { Collection: MongoCollection, MongoClient } = require(\"mongodb\");\nconst { Collection, Fields } = require(\"quickmongo\");\n\nconst mongo = new MongoClient(\"mongodb://localhost/quickmongo\");\nconst schema = new Fields.ObjectField({\n    difficulty: new Fields.StringField(),\n    items: new Fields.ArrayField(new Fields.StringField()),\n    balance: new Fields.NumberField()\n});\n\nmongo.connect()\n    .then(() => {\n        console.log(\"Connected to the database!\");\n        doStuff();\n    });\n\nasync function doStuff() {\n    const mongoCollection = mongo.db().collection(\"JSON\");\n\n    const db = new Collection(mongoCollection, schema);\n    \n    await db.set(\"userInfo\", { difficulty: \"Easy\", items: [], balance: 0 }).then(console.log);\n    // -> { difficulty: 'Easy', items: [], balance: 0 }\n\n    await db.push(\"userInfo\", \"Sword\", \"items\").then(console.log);\n    // -> { difficulty: 'Easy', items: ['Sword'], balance: 0 }\n\n    await db.add(\"userInfo\", 500, \"balance\").then(console.log);\n    // -> { difficulty: 'Easy', items: ['Sword'], balance: 500 }\n\n    // Repeating previous examples:\n    await db.push(\"userInfo\", \"Watch\", \"items\").then(console.log);\n    // -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 500 }\n\n    await db.add(\"userInfo\", 500, \"balance\").then(console.log);\n    // -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 1000 }\n\n    // Fetching individual properties\n    await db.get(\"userInfo\", \"balance\").then(console.log);\n    // -> 1000\n    await db.get(\"userInfo\", \"items\").then(console.log);\n    // -> ['Sword', 'Watch']\n\n    // remove item\n    await db.pull(\"userInfo\", \"Sword\", \"items\").then(console.log);\n    // -> { difficulty: 'Easy', items: ['Watch'], balance: 1000 }\n}\n```\n\n# Discord Support\n**[SnowflakeDev Community ❄️](https://snowflakedev.org/discord)**","path":"README.md"}}}},"classes":[{"name":"Collection","description":"<p>The QuickMongo collection</p>","construct":{"name":"Collection","description":"<p>Create new quickmongo collection instance</p>","params":[{"name":"collection","description":"<p>The MongoDB collection</p>","type":[[["MongoCollection"]]]},{"name":"model","description":"<p>Field model</p>","type":[[["FieldModel"]]]}]},"methods":[{"name":"has","description":"<p>Returns if the collection has data with the specified key.\n<warn>This method only checks if the data is <strong>NOT</strong> undefined.</warn></p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"path","description":"<p>The path</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":35,"file":"collection.ts","path":"src"}},{"name":"get","description":"<p>Get data from the collection</p>","params":[{"name":"key","description":"<p>The key to retrieve data</p>","type":[[["string"]]]},{"name":"path","description":"<p>The path to pick from the data</p>","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<("],["FieldType","|"],["any",")>"]]],"meta":{"line":51,"file":"collection.ts","path":"src"}},{"name":"set","description":"<p>Set data to the collection</p>","params":[{"name":"key","description":"<p>The key to retrieve data</p>","type":[[["string"]]]},{"name":"value","description":"<p>The data to save</p>","type":[[["FieldType"]]]},{"name":"path","description":"<p>The path to save data</p>","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["FieldType",">"]]],"meta":{"line":80,"file":"collection.ts","path":"src"}},{"name":"delete","description":"<p>Delete a data from the collection</p>","params":[{"name":"key","description":"<p>The key to remove</p>","type":[[["string"]]]},{"name":"path","description":"<p>The path to remove</p>","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":119,"file":"collection.ts","path":"src"}},{"name":"drop","description":"<p>Drops this collection</p>","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":151,"file":"collection.ts","path":"src"}},{"name":"all","description":"<p>Returns all data from this collection as array</p>","params":[{"name":"options","description":"<p>The options</p>","optional":true,"default":"{}","type":[[["AllCollectionDocumentOptions"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["FieldToDocumentScheme",">>"]]],"meta":{"line":163,"file":"collection.ts","path":"src"}},{"name":"push","description":"<p>Pushes to the array inside a field</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value to push</p>","type":[[["any"]],[["Array","<"],["any",">"]]]},{"name":"path","description":"<p>The path where it should push</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<("],["FieldType","|"],["undefined",")>"]]],"meta":{"line":178,"file":"collection.ts","path":"src"}},{"name":"pull","description":"<p>Pulls from the array inside a field</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value to pull</p>","type":[[["any"]],[["Array","<"],["any",">"]]]},{"name":"path","description":"<p>The path where it should push</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<("],["FieldType","|"],["undefined",")>"]]],"meta":{"line":196,"file":"collection.ts","path":"src"}},{"name":"latency","description":"<p>Returns the db latency in ms</p>","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":213,"file":"collection.ts","path":"src"}},{"name":"export","description":"<p>Exports this collection to a json object</p>","async":true,"returns":[[["Promise","<"],["CollectionExport",">"]]],"meta":{"line":223,"file":"collection.ts","path":"src"}}],"meta":{"line":20,"file":"collection.ts","path":"src"}},{"name":"AnyField","extends":[[["FieldModel"]]],"construct":{"name":"AnyField","description":"<p>Any field</p>","params":[{"name":"options","description":"<p>The Field Model Options</p>","optional":true,"type":[[["FieldModelOptions"]]]}]},"props":[{"name":"options","description":"<p>The field model options</p>","readonly":true,"type":[[["FieldModelOptions"]]],"meta":{"line":54,"file":"model.ts","path":"src/fields"}}],"methods":[{"name":"validate","description":"<p>Validates the data</p>","returns":[[["boolean"]]],"meta":{"line":16,"file":"AnyField.ts","path":"src/fields"}},{"name":"create","description":"<p>Creates value</p>","inherits":"FieldModel#create","inherited":true,"params":[{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":62,"file":"model.ts","path":"src/fields"}}],"meta":{"line":4,"file":"AnyField.ts","path":"src/fields"}},{"name":"ArrayField","extends":[[["FieldModel"]]],"construct":{"name":"ArrayField","description":"<p>Array field</p>","params":[{"name":"options","description":"<p>The Field Model Options</p>","optional":true,"type":[[["FieldModelOptions"]]]}]},"props":[{"name":"options","description":"<p>The field model options</p>","readonly":true,"type":[[["FieldModelOptions"]]],"meta":{"line":54,"file":"model.ts","path":"src/fields"}}],"methods":[{"name":"validate","description":"<p>Validates the data</p>","params":[{"name":"value","description":"<p>The value to validate</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":19,"file":"ArrayField.ts","path":"src/fields"}},{"name":"create","description":"<p>Creates value</p>","inherits":"FieldModel#create","inherited":true,"params":[{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":62,"file":"model.ts","path":"src/fields"}}],"meta":{"line":3,"file":"ArrayField.ts","path":"src/fields"}},{"name":"BooleanField","extends":[[["FieldModel"]]],"construct":{"name":"BooleanField","description":"<p>Boolean field</p>","params":[{"name":"options","description":"<p>The options</p>","optional":true,"type":[[["FieldModelOptions"]]]}]},"props":[{"name":"options","description":"<p>The field model options</p>","readonly":true,"type":[[["FieldModelOptions"]]],"meta":{"line":54,"file":"model.ts","path":"src/fields"}}],"methods":[{"name":"validate","description":"<p>Validates the data</p>","params":[{"name":"value","description":"<p>The value to validate</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":15,"file":"BooleanField.ts","path":"src/fields"}},{"name":"create","description":"<p>Creates value</p>","inherits":"FieldModel#create","inherited":true,"params":[{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":62,"file":"model.ts","path":"src/fields"}}],"meta":{"line":3,"file":"BooleanField.ts","path":"src/fields"}},{"name":"NullableField","extends":[[["FieldModel"]]],"construct":{"name":"NullableField","description":"<p>The nullable field</p>","params":[{"name":"model","description":"<p>the field model</p>","type":[[["FieldModel"]]]}]},"props":[{"name":"options","description":"<p>The field model options</p>","readonly":true,"type":[[["FieldModelOptions"]]],"meta":{"line":54,"file":"model.ts","path":"src/fields"}}],"methods":[{"name":"validate","description":"<p>Validates the data</p>","params":[{"name":"value","description":"<p>The value to validate</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":19,"file":"NullableField.ts","path":"src/fields"}},{"name":"create","description":"<p>Creates value</p>","inherits":"FieldModel#create","inherited":true,"params":[{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":62,"file":"model.ts","path":"src/fields"}}],"meta":{"line":3,"file":"NullableField.ts","path":"src/fields"}},{"name":"NumberField","extends":[[["FieldModel"]]],"construct":{"name":"NumberField","description":"<p>The number field</p>","params":[{"name":"options","description":"<p>Field model options</p>","optional":true,"type":[[["FieldModelOptions"]]]}]},"props":[{"name":"options","description":"<p>The field model options</p>","readonly":true,"type":[[["FieldModelOptions"]]],"meta":{"line":54,"file":"model.ts","path":"src/fields"}}],"methods":[{"name":"validate","description":"<p>Validates the data</p>","params":[{"name":"value","description":"<p>The value to validate</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":15,"file":"NumberField.ts","path":"src/fields"}},{"name":"create","description":"<p>Creates value</p>","inherits":"FieldModel#create","inherited":true,"params":[{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":62,"file":"model.ts","path":"src/fields"}}],"meta":{"line":3,"file":"NumberField.ts","path":"src/fields"}},{"name":"ObjectField","extends":[[["FieldModel"]]],"construct":{"name":"ObjectField","description":"<p>The object field model</p>","params":[{"name":"model","description":"<p>the model</p>","type":[[["FieldModel"]]]},{"name":"options","description":"<p>The field model options</p>","optional":true,"type":[[["FieldModelOptions"]]]}]},"props":[{"name":"options","description":"<p>The field model options</p>","readonly":true,"type":[[["FieldModelOptions"]]],"meta":{"line":54,"file":"model.ts","path":"src/fields"}}],"methods":[{"name":"validate","description":"<p>Validates the data</p>","params":[{"name":"value","description":"<p>The value to validate</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":24,"file":"ObjectField.ts","path":"src/fields"}},{"name":"create","description":"<p>Creates value</p>","inherits":"FieldModel#create","inherited":true,"params":[{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":62,"file":"model.ts","path":"src/fields"}}],"meta":{"line":7,"file":"ObjectField.ts","path":"src/fields"}},{"name":"StringField","extends":[[["FieldModel"]]],"construct":{"name":"StringField","description":"<p>The string field</p>","params":[{"name":"options","description":"<p>The field model options</p>","optional":true,"type":[[["FieldModelOptions"]]]}]},"props":[{"name":"options","description":"<p>The field model options</p>","readonly":true,"type":[[["FieldModelOptions"]]],"meta":{"line":54,"file":"model.ts","path":"src/fields"}}],"methods":[{"name":"validate","description":"<p>Validates the data</p>","params":[{"name":"value","description":"<p>The value to validate</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":15,"file":"StringField.ts","path":"src/fields"}},{"name":"create","description":"<p>Creates value</p>","inherits":"FieldModel#create","inherited":true,"params":[{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":62,"file":"model.ts","path":"src/fields"}}],"meta":{"line":3,"file":"StringField.ts","path":"src/fields"}},{"name":"FieldModel","construct":{"name":"FieldModel","description":"<p>The field model</p>","params":[{"name":"options","description":"<p>Field model options</p>","optional":true,"type":[[["FieldModelOptions"]]]}]},"props":[{"name":"options","description":"<p>The field model options</p>","readonly":true,"type":[[["FieldModelOptions"]]],"meta":{"line":54,"file":"model.ts","path":"src/fields"}}],"methods":[{"name":"create","description":"<p>Creates value</p>","params":[{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":62,"file":"model.ts","path":"src/fields"}},{"name":"validate","description":"<p>Validates the data</p>","params":[{"name":"value","description":"<p>The value to validate</p>","type":[[["any"]]]}],"returns":[[["boolean"]]],"meta":{"line":72,"file":"model.ts","path":"src/fields"}}],"meta":{"line":49,"file":"model.ts","path":"src/fields"}}],"interfaces":[],"typedefs":[{"name":"CollectionExport","type":[[["object"]]],"props":[{"name":"db","description":"<p>The database name</p>","type":[[["string"]]]},{"name":"name","description":"<p>The collection name</p>","type":[[["string"]]]},{"name":"namespace","description":"<p>The collection namespace</p>","type":[[["string"]]]},{"name":"data","description":"<p>The data</p>","type":[[["Array","<"],["FieldToDocumentScheme",">"]]]}],"meta":{"line":18,"file":"model.ts","path":"src/fields"}},{"name":"AllCollectionDocumentOptions","type":[[["object"]]],"props":[{"name":"max","description":"<p>The max value</p>","optional":true,"type":[[["number"]]]},{"name":"sort","description":"<p>Sort options</p>","optional":true,"default":"{}","type":[[["CollectionSortOptions"]]]}],"meta":{"line":25,"file":"model.ts","path":"src/fields"}},{"name":"FieldToDocumentScheme","type":[[["object"]]],"props":[{"name":"ID","description":"<p>The key</p>","type":[[["string"]]]},{"name":"data","description":"<p>The value</p>","type":[[["FieldType"]]]}],"meta":{"line":30,"file":"model.ts","path":"src/fields"}},{"name":"CollectionSortOptions","type":[[["object"]]],"props":[{"name":"by","description":"<p>Sort direction</p>","optional":true,"type":[[["ascending"]],[["asc"]],[["descending"]],[["desc"]]]},{"name":"target","description":"<p>The sort target</p>","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]]]}],"meta":{"line":35,"file":"model.ts","path":"src/fields"}},{"name":"FieldModelOptions","type":[[["object"]]],"props":[{"name":"defaultValue","description":"<p>The default value</p>","optional":true,"type":[[["any"]]]}],"meta":{"line":40,"file":"model.ts","path":"src/fields"}},{"name":"FieldType","description":"<p>The field type</p>","type":[[["ArrayField"]],[["BooleanField"]],[["NullableField"]],[["NumberField"]],[["ObjectField"]],[["StringField"]]],"meta":{"line":83,"file":"model.ts","path":"src/fields"}}],"externals":[]}
