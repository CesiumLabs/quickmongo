{"meta":{"generator":"0.9.0","format":20,"date":1642750421979},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# QuickMongo\n\nQuick Mongodb wrapper for beginners that provides key-value based interface.\n\n![](https://camo.githubusercontent.com/ee0b303561b8c04223d4f469633e2088968cf514f0f6901c729331c462a32f10/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6174746163686d656e74732f3739333638393539323431343939343436362f3833323039343438363834353834393631302f6c6f676f2e37393539646231325f35302e706e67)\n\n# Installing\n\n```bash\n$ npm install --save quickmongo\n```\n\n# Documentation\n**[https://quickmongo.js.org](https://quickmongo.js.org)**\n\n# Features\n- Beginner friendly\n- Asynchronous\n- Dot notation support\n- Key-Value like interface\n- Easy to use\n\n# Example\n\n```js\nimport { Database } from \"quickmongo\";\n\nconst db = new Database(\"mongodb://localhost:27017/quickmongo\");\n\ndb.on(\"ready\", () => {\n    console.log(\"Connected to the database\");\n    doStuff();\n});\n\n// top-level awaits\nawait db.connect(); \n\nasync function doStuff() {\n    // Setting an object in the database:\n    await db.set(\"userInfo\", { difficulty: \"Easy\" });\n    // -> { difficulty: 'Easy' }\n\n    // Pushing an element to an array (that doesn't exist yet) in an object:\n    await db.push(\"userInfo.items\", \"Sword\");\n    // -> { difficulty: 'Easy', items: ['Sword'] }\n\n    // Adding to a number (that doesn't exist yet) in an object:\n    await db.add(\"userInfo.balance\", 500);\n    // -> { difficulty: 'Easy', items: ['Sword'], balance: 500 }\n\n    // Repeating previous examples:\n    await db.push(\"userInfo.items\", \"Watch\");\n    // -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 500 }\n    await db.add(\"userInfo.balance\", 500);\n    // -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 1000 }\n\n    // Fetching individual properties\n    await db.get(\"userInfo.balance\"); // -> 1000\n    await db.get(\"userInfo.items\"); // -> ['Sword', 'Watch']\n\n    // remove item\n    await db.pull(\"userInfo.items\", \"Sword\");\n    // -> { difficulty: 'Easy', items: ['Watch'], balance: 1000 }\n}\n```\n\n**Created and maintained by CesiumLabs**\n\n# Discord Support\n**[CesiumLabs](https://discord.gg/uqB8kxh)**\n","path":"README.md"}}}},"classes":[{"name":"Database","description":"<p>The Database constructor</p>","extends":[[["EventEmitter"]]],"construct":{"name":"Database","description":"<p>Creates new quickmongo instance</p>","params":[{"name":"url","description":"<p>The database url</p>","type":[[["string"]]]},{"name":"options","description":"<p>The database options</p>","optional":true,"default":"{}","type":[[["QuickMongoOptions"]]]}]},"props":[{"name":"ready","description":"<p>If the database is ready</p>","type":[[["boolean"]]],"meta":{"line":137,"file":"Database.ts","path":"src"}},{"name":"readyState","description":"<p>Database ready state</p>","type":[[["number"]]],"meta":{"line":145,"file":"Database.ts","path":"src"}},{"name":"table","description":"<p>Identical to quick.db table</p>","type":[[["Database"]]],"meta":{"line":319,"file":"Database.ts","path":"src"}},{"name":"metadata","description":"<p>The db metadata</p>","nullable":true,"type":[[["Object"]]],"meta":{"line":501,"file":"Database.ts","path":"src"}}],"methods":[{"name":"isChild","description":"<p>If this is a child database</p>","returns":[[["boolean"]]],"meta":{"line":121,"file":"Database.ts","path":"src"}},{"name":"isParent","description":"<p>If this is a parent database</p>","returns":[[["boolean"]]],"meta":{"line":129,"file":"Database.ts","path":"src"}},{"name":"getRaw","description":"<p>Get raw document</p>","access":"private","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["DocType",">"]]],"meta":{"line":153,"file":"Database.ts","path":"src"}},{"name":"get","description":"<p>Get item from the database</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":177,"file":"Database.ts","path":"src"}},{"name":"fetch","description":"<p>Get item from the database</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":177,"file":"Database.ts","path":"src"}},{"name":"set","description":"<p>Set item in the database</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":186,"file":"Database.ts","path":"src"}},{"name":"has","description":"<p>Returns false if the value is nullish, else true</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":231,"file":"Database.ts","path":"src"}},{"name":"delete","description":"<p>Deletes item from the database</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":242,"file":"Database.ts","path":"src"}},{"name":"deleteAll","description":"<p>Delete all data from this database</p>","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":271,"file":"Database.ts","path":"src"}},{"name":"count","description":"<p>Get the document count in this database</p>","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":280,"file":"Database.ts","path":"src"}},{"name":"ping","description":"<p>The database latency in ms</p>","async":true,"returns":[[["number"]]],"meta":{"line":288,"file":"Database.ts","path":"src"}},{"name":"instantiateChild","description":"<p>Create a child database, either from new connection or current connection (similar to quick.db table)</p>","examples":["const child = await db.instantiateChild(\"NewCollection\");\nconsole.log(child.all());"],"params":[{"name":"collection","description":"<p>The collection name (defaults to <code>JSON</code>)</p>","nullable":true,"type":[[["string"]]]},{"name":"url","description":"<p>The database url (not needed if the child needs to share connection from parent)</p>","nullable":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Database",">"]]],"meta":{"line":298,"file":"Database.ts","path":"src"}},{"name":"all","description":"<p>Returns everything from the database</p>","params":[{"name":"options","description":"<p>The request options</p>","nullable":true,"type":[[["AllQueryOptions"]]]}],"async":true,"returns":[[["Promise","<"],["AllData",">"]]],"meta":{"line":358,"file":"Database.ts","path":"src"}},{"name":"drop","description":"<p>Drops this database</p>","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":385,"file":"Database.ts","path":"src"}},{"name":"push","description":"<p>Identical to quick.db push</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value or array of values</p>","type":[[["any"]],[["Array","<"],["any",">"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":394,"file":"Database.ts","path":"src"}},{"name":"pull","description":"<p>Opposite of push, used to remove item</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value or array of values</p>","type":[[["any"]],[["Array","<"],["any",">"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":413,"file":"Database.ts","path":"src"}},{"name":"add","description":"<p>Identical to quick.db add</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value</p>","type":[[["number"]]]}],"async":true,"returns":[[["any"]]],"meta":{"line":441,"file":"Database.ts","path":"src"}},{"name":"subtract","description":"<p>Identical to quick.db subtract</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value</p>","type":[[["number"]]]}],"async":true,"returns":[[["any"]]],"meta":{"line":453,"file":"Database.ts","path":"src"}},{"name":"connect","description":"<p>Connects to the database.</p>","returns":[[["Promise","<"],["Database",">"]]],"meta":{"line":465,"file":"Database.ts","path":"src"}},{"name":"stats","description":"<p>Returns database statistics</p>","async":true,"returns":[[["Promise","<"],["CollStats",">"]]],"meta":{"line":514,"file":"Database.ts","path":"src"}},{"name":"close","description":"<p>Close the database connection</p>","params":[{"name":"force","description":"<p>Close forcefully</p>","optional":true,"default":false,"nullable":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":524,"file":"Database.ts","path":"src"}},{"name":"__formatData","description":"<p>Formats document data</p>","access":"private","params":[{"name":"doc","description":"<p>The document</p>","type":[[["Document"]]]}],"returns":[[["any"]]],"meta":{"line":545,"file":"Database.ts","path":"src"}},{"name":"__readyCheck","description":"<p>Checks if the database is ready</p>","access":"private","meta":{"line":555,"file":"Database.ts","path":"src"}}],"events":[{"name":"ready","description":"<p>Emitted once the database is ready</p>","params":[{"name":"db","description":"<p>The database</p>","type":[[["Database"]]]}],"meta":{"line":568,"file":"Database.ts","path":"src"}},{"name":"connecting","description":"<p>Emitted when Mongoose starts making its initial connection to the MongoDB server</p>","meta":{"line":574,"file":"Database.ts","path":"src"}},{"name":"connected","description":"<p>Emitted when QuickMongo successfully makes its initial connection to the MongoDB server, or when QuickMongo reconnects after losing connectivity. May be emitted multiple times if QuickMongo loses connectivity.</p>","meta":{"line":579,"file":"Database.ts","path":"src"}},{"name":"open","description":"<p>Emitted after <code>'connected'</code> and onOpen is executed on all of this connection's models.</p>","meta":{"line":584,"file":"Database.ts","path":"src"}},{"name":"disconnecting","description":"<p>Emitted when called <code>db.close()</code> to disconnect from MongoDB</p>","meta":{"line":589,"file":"Database.ts","path":"src"}},{"name":"disconnected","description":"<p>Emitted when QuickMongo lost connection to the MongoDB server. This event may be due to your code explicitly closing the connection, the database server crashing, or network connectivity issues.</p>","meta":{"line":594,"file":"Database.ts","path":"src"}},{"name":"close","description":"<p>Emitted after <code>db.close()</code> successfully closes the connection. If you call <code>db.close()</code>, you'll get both a <code>'disconnected'</code> event and a <code>'close'</code> event.</p>","meta":{"line":599,"file":"Database.ts","path":"src"}},{"name":"reconnected","description":"<p>Emitted if QuickMongo lost connectivity to MongoDB and successfully reconnected. QuickMongo attempts to automatically reconnect when it loses connection to the database.</p>","meta":{"line":604,"file":"Database.ts","path":"src"}},{"name":"error","description":"<p>Emitted if an error occurs on a connection, like a parseError due to malformed data or a payload larger than <code>16MB</code>.</p>","params":[{"name":"error","description":"<p>The error</p>","type":[[["Error"]]]}],"meta":{"line":609,"file":"Database.ts","path":"src"}},{"name":"fullsetup","description":"<p>Emitted when you're connecting to a replica set and QuickMongo has successfully connected to the primary and at least one secondary.</p>","meta":{"line":615,"file":"Database.ts","path":"src"}},{"name":"all","description":"<p>Emitted when you're connecting to a replica set and Mongoose has successfully connected to all servers specified in your connection string.</p>","meta":{"line":620,"file":"Database.ts","path":"src"}},{"name":"reconnectFailed","description":"<p>Emitted when you're connected to a standalone server and Mongoose has run out of <code>reconnectTries</code>. The MongoDB driver will no longer attempt to reconnect after this event is emitted. This event will never be emitted if you're connected to a replica set.</p>","meta":{"line":625,"file":"Database.ts","path":"src"}}],"meta":{"line":71,"file":"Database.ts","path":"src"}},{"name":"Util","description":"<p>The util class</p>","extends":[[["null"]]],"construct":{"name":"Util","description":"<p>This is a static class, do not instantiate</p>"},"methods":[{"name":"v","description":"<p>Validate</p>","scope":"static","params":[{"name":"k","description":"<p>The source</p>","type":[[["any"]]]},{"name":"type","description":"<p>The type</p>","type":[[["string"]]]},{"name":"fallback","description":"<p>The fallback value</p>","nullable":true,"type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":17,"file":"Util.ts","path":"src"}},{"name":"pick","description":"<p>Picks from nested object by dot notation</p>","scope":"static","params":[{"name":"holder","description":"<p>The source</p>","type":[[["any"]]]},{"name":"id","description":"<p>The prop to get</p>","nullable":true,"type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":28,"file":"Util.ts","path":"src"}},{"name":"getKey","description":"<p>Returns master key</p>","scope":"static","params":[{"name":"key","description":"<p>The key that may have dot notation</p>","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":42,"file":"Util.ts","path":"src"}},{"name":"getKeyMetadata","description":"<p>Returns key metadata</p>","scope":"static","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"returns":[[["KeyMetadata"]]],"meta":{"line":51,"file":"Util.ts","path":"src"}}],"meta":{"line":3,"file":"Util.ts","path":"src"}}],"interfaces":[],"typedefs":[{"name":"KeyMetadata","type":[[["Object"]]],"props":[{"name":"master","description":"<p>The master key</p>","type":[[["string"]]]},{"name":"child","description":"<p>The child keys</p>","type":[[["Array","<"],["string",">"]]]},{"name":"target","description":"<p>The child as target key</p>","type":[[["string"]]]}],"meta":{"line":66,"file":"Util.ts","path":"src"}}],"externals":[]}