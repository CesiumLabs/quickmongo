{"meta":{"generator":"0.9.0","format":20,"date":1642604932281},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# QuickMongo\n\nQuick Mongodb wrapper for beginners that provides key-value based interface.\n\n![](https://camo.githubusercontent.com/ee0b303561b8c04223d4f469633e2088968cf514f0f6901c729331c462a32f10/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6174746163686d656e74732f3739333638393539323431343939343436362f3833323039343438363834353834393631302f6c6f676f2e37393539646231325f35302e706e67)\n\n# Installing\n\n```bash\n$ npm install --save quickmongo\n```\n\n# Documentation\n**[https://quickmongo.js.org](https://quickmongo.js.org)**\n\n# Features\n- Beginner friendly\n- Asynchronous\n- Dot notation support\n- Key-Value like interface\n- Easy to use\n\n# Example\n\n```js\nconst { Database } = require(\"quickmongo\");\n\nconst db = new Database(\"mongodb://localhost/quickmongo\");\n\ndb.on(\"ready\", () => {\n    console.log(\"Connected to the database\");\n    doStuff();\n});\n\ndb.connect();\n\nfunction doStuff() {\n    // Setting an object in the database:\n    await db.set(\"userInfo\", { difficulty: \"Easy\" });\n    // -> { difficulty: 'Easy' }\n\n    // Pushing an element to an array (that doesn't exist yet) in an object:\n    await db.push(\"userInfo.items\", \"Sword\");\n    // -> { difficulty: 'Easy', items: ['Sword'] }\n\n    // Adding to a number (that doesn't exist yet) in an object:\n    await db.add(\"userInfo.balance\", 500);\n    // -> { difficulty: 'Easy', items: ['Sword'], balance: 500 }\n\n    // Repeating previous examples:\n    await db.push(\"userInfo.items\", \"Watch\");\n    // -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 500 }\n    await db.add(\"userInfo.balance\", 500);\n    // -> { difficulty: 'Easy', items: ['Sword', 'Watch'], balance: 1000 }\n\n    // Fetching individual properties\n    await db.get(\"userInfo.balance\"); // -> 1000\n    await db.get(\"userInfo.items\"); // -> ['Sword', 'Watch']\n\n    // remove item\n    db.pull(\"userInfo\", \"Sword\", \"items\").then(console.log);\n    // -> { difficulty: 'Easy', items: ['Watch'], balance: 1000 }\n}\n```\n\n**Created and maintained by CesiumLabs**\n\n# Discord Support\n**[CesiumLabs](https://discord.gg/uqB8kxh)**\n","path":"README.md"}}}},"classes":[{"name":"Database","description":"<p>The Database constructor</p>","extends":[[["EventEmitter"]]],"construct":{"name":"Database","description":"<p>Creates new quickmongo instance</p>","params":[{"name":"url","description":"<p>The database url</p>","type":[[["string"]]]},{"name":"options","description":"<p>The database options</p>","optional":true,"default":"{}","type":[[["QuickMongoOptions"]]]}]},"props":[{"name":"ready","description":"<p>If the database is ready</p>","type":[[["boolean"]]],"meta":{"line":126,"file":"Database.ts","path":"src"}},{"name":"readyState","description":"<p>Database ready state</p>","type":[[["number"]]],"meta":{"line":134,"file":"Database.ts","path":"src"}}],"methods":[{"name":"isChild","description":"<p>If this is a child database</p>","returns":[[["boolean"]]],"meta":{"line":110,"file":"Database.ts","path":"src"}},{"name":"isParent","description":"<p>If this is a parent database</p>","returns":[[["boolean"]]],"meta":{"line":118,"file":"Database.ts","path":"src"}},{"name":"getRaw","description":"<p>Get raw document</p>","access":"private","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["DocType",">"]]],"meta":{"line":142,"file":"Database.ts","path":"src"}},{"name":"get","description":"<p>Get item from the database</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":155,"file":"Database.ts","path":"src"}},{"name":"set","description":"<p>Set item in the database</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value</p>","type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":166,"file":"Database.ts","path":"src"}},{"name":"has","description":"<p>Returns false if the value is nullish, else true</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":211,"file":"Database.ts","path":"src"}},{"name":"delete","description":"<p>Deletes item from the database</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":222,"file":"Database.ts","path":"src"}},{"name":"deleteAll","description":"<p>Delete all data from this database</p>","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":251,"file":"Database.ts","path":"src"}},{"name":"count","description":"<p>Get the document count in this database</p>","async":true,"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":260,"file":"Database.ts","path":"src"}},{"name":"ping","description":"<p>The database latency in ms</p>","async":true,"returns":[[["number"]]],"meta":{"line":268,"file":"Database.ts","path":"src"}},{"name":"instantiateChild","description":"<p>Create a child database (similar to quick.db table)</p>","examples":["const child = await db.instantiateChild(\"NewCollection\");\nconsole.log(child.all());"],"params":[{"name":"collection","description":"<p>The collection name (defaults to <code>JSON</code>)</p>","nullable":true,"type":[[["string"]]]},{"name":"url","description":"<p>The database url (not needed if the child needs to share connection from parent)</p>","nullable":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Database",">"]]],"meta":{"line":278,"file":"Database.ts","path":"src"}},{"name":"all","description":"<p>Returns everything from the database</p>","params":[{"name":"options","description":"<p>The request options</p>","nullable":true,"type":[[["AllQueryOptions"]]]}],"async":true,"returns":[[["Promise","<"],["AllData",">"]]],"meta":{"line":299,"file":"Database.ts","path":"src"}},{"name":"push","description":"<p>Identical to quick.db push</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value or array of values</p>","type":[[["any"]],[["Array","<"],["any",">"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":326,"file":"Database.ts","path":"src"}},{"name":"pull","description":"<p>Opposite of push, used to remove item</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value or array of values</p>","type":[[["any"]],[["Array","<"],["any",">"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":345,"file":"Database.ts","path":"src"}},{"name":"add","description":"<p>Identical to quick.db add</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value</p>","type":[[["number"]]]}],"async":true,"returns":[[["any"]]],"meta":{"line":373,"file":"Database.ts","path":"src"}},{"name":"subtract","description":"<p>Identical to quick.db subtract</p>","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]},{"name":"value","description":"<p>The value</p>","type":[[["number"]]]}],"async":true,"returns":[[["any"]]],"meta":{"line":385,"file":"Database.ts","path":"src"}},{"name":"connect","description":"<p>Connects to the database.</p>","returns":[[["Promise","<"],["Database",">"]]],"meta":{"line":397,"file":"Database.ts","path":"src"}},{"name":"close","description":"<p>Close the database connection</p>","params":[{"name":"force","description":"<p>Close forcefully</p>","optional":true,"default":false,"nullable":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":432,"file":"Database.ts","path":"src"}},{"name":"__formatData","description":"<p>Formats document data</p>","access":"private","params":[{"name":"doc","description":"<p>The document</p>","type":[[["Document"]]]}],"returns":[[["any"]]],"meta":{"line":441,"file":"Database.ts","path":"src"}},{"name":"__readyCheck","description":"<p>Checks if the database is ready</p>","access":"private","meta":{"line":451,"file":"Database.ts","path":"src"}}],"events":[{"name":"ready","description":"<p>Emitted once the database is ready</p>","params":[{"name":"db","description":"<p>The database</p>","type":[[["Database"]]]}],"meta":{"line":460,"file":"Database.ts","path":"src"}}],"meta":{"line":60,"file":"Database.ts","path":"src"}},{"name":"Util","description":"<p>The util class</p>","extends":[[["null"]]],"construct":{"name":"Util","description":"<p>This is a static class, do not instantiate</p>"},"methods":[{"name":"v","description":"<p>Validate</p>","scope":"static","params":[{"name":"k","description":"<p>The source</p>","type":[[["any"]]]},{"name":"type","description":"<p>The type</p>","type":[[["string"]]]},{"name":"fallback","description":"<p>The fallback value</p>","nullable":true,"type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":17,"file":"Util.ts","path":"src"}},{"name":"pick","description":"<p>Picks from nested object by dot notation</p>","scope":"static","params":[{"name":"holder","description":"<p>The source</p>","type":[[["any"]]]},{"name":"id","description":"<p>The prop to get</p>","nullable":true,"type":[[["string"]]]}],"returns":[[["any"]]],"meta":{"line":28,"file":"Util.ts","path":"src"}},{"name":"getKey","description":"<p>Returns master key</p>","scope":"static","params":[{"name":"key","description":"<p>The key that may have dot notation</p>","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":42,"file":"Util.ts","path":"src"}},{"name":"getKeyMetadata","description":"<p>Returns key metadata</p>","scope":"static","params":[{"name":"key","description":"<p>The key</p>","type":[[["string"]]]}],"returns":[[["KeyMetadata"]]],"meta":{"line":51,"file":"Util.ts","path":"src"}}],"meta":{"line":3,"file":"Util.ts","path":"src"}}],"interfaces":[],"typedefs":[{"name":"KeyMetadata","type":[[["Object"]]],"props":[{"name":"master","description":"<p>The master key</p>","type":[[["string"]]]},{"name":"child","description":"<p>The child keys</p>","type":[[["Array","<"],["string",">"]]]},{"name":"target","description":"<p>The child as target key</p>","type":[[["string"]]]}],"meta":{"line":66,"file":"Util.ts","path":"src"}}],"externals":[]}